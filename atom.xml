<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ruikye]]></title>
  <subtitle><![CDATA[// ruikye's 个人博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.ruikye.com/"/>
  <updated>2014-08-29T10:04:18.047Z</updated>
  <id>http://www.ruikye.com/</id>
  
  <author>
    <name><![CDATA[零雨の夜]]></name>
    <email><![CDATA[kang.ruikye@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java 单例模式]]></title>
    <link href="http://www.ruikye.com/2014/08/28/Java-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.ruikye.com/2014/08/28/Java-单例模式/</id>
    <published>2014-08-28T14:55:07.000Z</published>
    <updated>2014-08-29T09:16:55.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>私有化构造函数（饿汉模式）：    </li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>{</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 sIntance = <span class="keyword">new</span> Singleton1();</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="title">Singleton1</span>(){</div><div class="line">   }</div><div class="line"> </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span>(){</div><div class="line">      <span class="keyword">return</span> sIntance;</div><div class="line">   }</div><div class="line">}</div></pre></figure>

<ol>
<li>私有化构造函数，并提供静态获获取实例方法（懒汉模式）：</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton sInstance;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="title">Singleton</span>() {</div><div class="line">     }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(){</div><div class="line">        <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>){</div><div class="line">             sInstance = <span class="keyword">new</span> Singleton();</div><div class="line">         }</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">     }</div><div class="line">}</div></pre></figure>

<ol>
<li><p>单元素 Enum 类型实现单列（强烈推荐）：</p>
<p>参考：《Effective Java》, 推荐使用该方法，理由如下：</p>
<ul>
<li>绝对的局唯一，可以序列化</li>
<li>绝对的预防反射攻击</li>
<li>绝对的简洁</li>
</ul>
</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton {</div><div class="line">    INSTANCE;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomthing</span>(){</div><div class="line">        Log.d(<span class="string">"Sigleton"</span> , <span class="string">"This is a single instace!"</span> );</div><div class="line">     }</div><div class="line">}</div></pre></figure>

<ol>
<li><p>利用 JVM 类加载机制（多线程）：  </p>
<p>我们知道 JVM 加载类时只会加载一次，可以利用此特性实现单例。优点：</p>
<ul>
<li>可以多线程使用</li>
<li>绝对唯一</li>
<li>不调用 getInstance 不会实例化</li>
</ul>
</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</div><div class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>{</div><div class="line">         <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">     }</div><div class="line"> </div><div class="line">     <span class="keyword">private</span> <span class="title">Singleton</span>(){</div><div class="line">     }</div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>() {</div><div class="line">         <span class="keyword">return</span> Holder. instance;</div><div class="line">     }</div><div class="line">}</div></pre></figure>

]]></content>
    
    
      <category term="Java" scheme="http://www.ruikye.com/tags/Java/"/>
    
      <category term="Java" scheme="http://www.ruikye.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask 的使用]]></title>
    <link href="http://www.ruikye.com/2014/08/28/AsyncTask-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.ruikye.com/2014/08/28/AsyncTask-的使用/</id>
    <published>2014-08-28T11:50:20.000Z</published>
    <updated>2014-08-29T09:16:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>AsyncTask是 Android 提供的在 UI 线程处理耗时操作的类，内部的实现原理是 Thread + Handle 的方式。AsyncTask 是用于处理耗时不是很长的异步操作（一般秒级的操作比较合适）；如果要执行时间很长的或者循环的异步任务，推荐使用其他的多线程 API, 比如：Thread, FetureTask, ThreadPoolExecutor。</p>
</blockquote>
<p>AsyncTask 是 Android 很重要的工具类，历史版本修改次数比较多，不同版本之间的区别也比较大：</p>
<blockquote>
<p><strong><em>Android 1.5:</em></strong><br>AsyncTask 底层是使用唯一的线程来执行任务的，任务按顺序执行，一个执行完再执行下一个</p>
<p><strong><em>Android 1.6:</em></strong><br>AsyncTask 使用线程池并行执行任务，执行顺序无法保证</p>
<p><strong><em>Android 3.0:</em></strong><br>从 Android 3.0 开始，又改为默认按顺序执行，一个接着一个执行。但是增加了一个函数来支持多线程并发执行：AsyncTask#executeOnExecutor (Executor, Params)</p>
</blockquote>
<p>下面来介绍最近的版本，Android 4.2 SDK中的：</p>
<blockquote>
<p>4.2 默认是按顺序执行的，同时支持多线程并发执行</p>
</blockquote>
<figure class="highlight java"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">5</span>; <span class="comment">//5个核心线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">128</span>; <span class="comment">//最多分配128个线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>; <span class="comment">//非核心线程空闲超时1s,自动销毁</span></div><div class="line"><span class="comment">//当无空闲核心线程时，新任务添加到消息队列；消息队列填满时，再启动新的线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = </div><div class="line">truetruetruetruetruetruenew LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">10</span>);<span class="comment">//等待消息队列</span></div><div class="line"><span class="comment">// 并行任务执行器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">           = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, </div><div class="line">           		KEEP_ALIVE, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div><div class="line"><span class="comment">// 顺序任务执行器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"><span class="comment">// 默认使用顺序任务执行器</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div></pre></figure>

<h4 id="新添加_AsyncTask_任务时，可能出现的_4_中情况：">新添加 AsyncTask 任务时，可能出现的 4 中情况：</h4>
<ol>
<li><p><strong>有空闲的核心线程时：</strong>直接使用空闲的核心线程执行异步任务  </p>
</li>
<li><p><strong>没有空闲的核心线程，但缓存队列未满时：</strong>新任务被添加到缓冲队列</p>
</li>
<li><p><strong>没有空闲的核心线程，缓冲队列已满，但线程数没到上线时：</strong>创建新的线程执行异步任务</p>
</li>
<li><p><strong>线程池中已满128个线程时：</strong>抛出 <em>RejectedExecutionException</em></p>
</li>
</ol>
<h4 id="其他注意点：">其他注意点：</h4>
<ol>
<li><p>由于 AsyncTask 内部的线程池是 <em>static</em> 类型，整个进程共用一个线程池；如果使用不当，会产生阻塞问题，尤其是单任务顺序执行的情况下，一个任务执行时间过长会阻塞其他任务的执行</p>
</li>
<li><p><em>static</em> 线程另外一个问题是，如果第一次调用 AsyncTask 在非 UI 线程中，那么以后使用 AsyncTask时，onPosExecute 也会在非 UI 线程中，此时如果执行 UI 操作会 Crash，所以第一次使用 AsyncTask 一定要在 UI 线程中使用，尤其是使用第三方 SDK 时要注意这点 </p>
</li>
<li><p>通常使用 AsyncTask 是在 Activity 中使用匿名的内部类来使用，内部类的一个问题是会保持外部类的实例，如果 AsyncTask 中的异步任务在 Activity 退出时还没执行完或者阻塞了，那么这个保持的外部的 Activity 实例得不到释放，会引起 OOM 问，解决办法是：在 AsyncTask 使用弱引用外部实例，或者保证在 Activity 退出时，所有的 AsyncTask 已执行完成或被取消 </p>
</li>
</ol>
]]></content>
    
    
      <category term="Android" scheme="http://www.ruikye.com/tags/Android/"/>
    
      <category term="Android" scheme="http://www.ruikye.com/categories/Android/"/>
    
  </entry>
  
</feed>
