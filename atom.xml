<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ruikye]]></title>
  <subtitle><![CDATA[// ruikye's 个人博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.ruikye.com/"/>
  <updated>2014-08-30T03:51:12.718Z</updated>
  <id>http://www.ruikye.com/</id>
  
  <author>
    <name><![CDATA[零雨の夜]]></name>
    <email><![CDATA[kang.ruikye@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hexo 搭建个人博客]]></title>
    <link href="http://www.ruikye.com/2014/08/29/Hexo-+-Github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.ruikye.com/2014/08/29/Hexo-+-Github-搭建个人博客/</id>
    <published>2014-08-29T14:35:13.000Z</published>
    <updated>2014-08-30T03:49:06.000Z</updated>
    <content type="html"><![CDATA[<p>最近 Github 在 IT 界是火得一踏糊涂，作为一个程序猿没听过 Github 真觉得 Out 了。本身 Github 是一个基于 git 版本控制系统的托管仓库，程序员可以在 Github 上托管代码，设计师可以在 Github 上协同创作等等各种方便。最近 Apple 为 IOS 发布了新的编程语言，北邮的几个学生就在 Github 上发起了协同翻译《The Swift Programming Language》英文版，项目地址：<a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="external">中文版 Apple 官方 Swift 教程</a>。</p>
<p>同时，Github 为了更好的程序员介绍自己的项目，提供了 Pages 功能，Pages 功能就是为每个项目提供一种静态网页的描述方式，很多网友就利用 Pages 功能搭建了自己的个人博客，这篇文章就是介绍如何使用 Hexo 快速的在 Github 上搭建自己的个人博客。</p>
<blockquote>
<p>Github 的 Pages 功能是免费的，省去了直接搭建博客的服务器成本；但是也有一定的限制，免费用户空间上线是 300M, 只能建立静态的个人博客，如果要建立动态网站还是用 WordPress 比较靠谱</p>
</blockquote>
<p>本来自己搭建了一个基于 WordPress 的博客 <em>(<a href="http://k.awaysoft.com" target="_blank" rel="external">k.awaysoft.com</a>)</em>，由于个人喜欢用 Markdown 写文章，而 WordPress 本身是不支持 Markdown 的，所以每次发布文章各种麻烦，加上 WordPress 越做越臃肿，萌生了换个框架搭建博客的想法。好早听说了 Github 的 Pages 功能可以搭建博客，由于各种原因一直没动手；听朋友介绍 Hexo 不错，遂百度，发现 Hexo 是利用了 Github 的 Pages 功能，于是就有了这个博客的诞生，在搭建博客过程中积累点点经验，不敢独享，分享给大家。</p>
<h2 id="工具介绍：">工具介绍：</h2>
<h3 id="1-_Hexo">1. Hexo</h3>
<p>Hexo 是一个基于 Node.js 的静态博客程序，可以方便的生成静态网页托管在 Github 和 Heroku上。作者是来自台湾的<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">@tommy351</a>。官方介绍：</p>
<blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.<br>基于 Node.js 的快速、简洁但功能强大的博客框架。</p>
</blockquote>
<p>Hexo 在 Gihub 上的主页是：<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">https://github.com/hexojs/hexo</a></p>
<h3 id="2-_Node-js">2. Node.js</h3>
<p>由于使用 Hexo 需要依赖 Node.js, 所以对此进行简单的介绍，直接引用百度百科的内容：</p>
<blockquote>
<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台，用来方便地搭建快速的易于扩展的网络应用. Node.js 借助事件驱动，非阻塞 I/O 模型变得轻量和高效， 非常适合运行在分布式设备的数据密集型的实时应用. Node.js 对 Google V8 引擎(应用于 Google Chrome 浏览器)进行了封装.</p>
</blockquote>
<h3 id="3-_Github">3. Github</h3>
<p>因为 Hexo 要将网站托管在 Github 上，也简单介绍下：</p>
<blockquote>
<p>Gist 是 Github 推出的基于 Git 的代码片段服务。用户可以提交自己的代码片段或任意的文本作，可以作为个人的代码管理库、文档管理库等。</p>
</blockquote>
<p>如果没有用过 Github, 先到 <a href="http://www.github.com" target="_blank" rel="external">http://www.github.com</a> 上去注册一个账户，托管博客要用到。</p>
<h3 id="4-_Git">4. Git</h3>
<p>Github 是 Git 的托管仓库，虽然用不到 Git 命令，但是 Hexo 也是依赖 Git 的。</p>
<blockquote>
<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。[4]<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。</p>
</blockquote>
<p>如果使用 Windows 的童鞋，还请先到 <a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a> 下载 Git 客户端，Mac 本身自带 git, 用 Linux 的童鞋应该是比较专业的，就不介绍了。</p>
<h2 id="搭建博客：">搭建博客：</h2>
<p>在使用 Hexo 之前，请先安装 Node.js 以及 Git，Node.js 和 Git 都有安装包，可以到官网去下载：</p>
<blockquote>
<p>Node.js 官网：<a href="http://www.nodejs.org/" target="_blank" rel="external">http://www.nodejs.org/</a><br>Git 官网：<a href="http://git-scm.com" target="_blank" rel="external">http://git-scm.com</a></p>
</blockquote>
<p>另外说明下：因为手头只有一台 Mac，所以下面使用的命令都是在 Mac 终端的，如果使用 Windows 的话，Git 有个 <em>Git Bash</em> 的程序，是一个模拟的终端，可以执行一些命令。</p>
<h3 id="1-_安装_Hexo">1. 安装 Hexo</h3>
<p><strong>前提：必须先安装 Node.js！</strong> 打开终端，执行命令：</p>
<figure class="highlight shell"><pre><div class="line"><span class="variable">$ </span>npm install hexo -g</div></pre></figure>

<p>Hexo 安装成功之后，在任意目录新建一个子目录并切换到这个目录，这就是本地的博客目录：</p>
<figure class="highlight shell"><pre><div class="line">$ <span class="keyword">cd</span> ~</div><div class="line">$ <span class="built_in">mkdir</span> MyBlog</div><div class="line">$ <span class="keyword">cd</span> MyBlog</div></pre></figure>

<p>初始化本地博客目录：</p>
<figure class="highlight shell"><pre><div class="line"><span class="variable">$ </span>hexo init</div><div class="line"><span class="variable">$ </span>npm install</div></pre></figure>

<p>至此，本地的博客就搭建好了，是不是超简单 ^_^！<br>如果要本地查看博客，继续执行下面的命令：</p>
<figure class="highlight shell"><pre><div class="line">$ hexo <span class="keyword">server</span>   <span class="comment">// 启动本地服务器</span></div></pre></figure>

<p>然后打开浏览器，在地址栏输入：localhost:4000，你就可以喉嗨尚的看到你的博客了～～～</p>
<blockquote>
<p>按下快捷键：<code>CTRL + D</code> 可以退出本地服务器</p>
</blockquote>
<h2 id="托管博客到_Github">托管博客到 Github</h2>
<p>尽管在本来浏览器中可已访问自己的博客了，但这仅仅只是一个单机版。如果要在整个互联网上发布直接的博客，需要有服务器托管，下面介绍如果托管直接的 Hexo 博客到 Github 上。</p>
<p><strong>前提：需在 <a href="http://www.github.com" target="_blank" rel="external">Github</a> 上注册</strong>！</p>
<p>登录 Github，创建已仓库(repositories), 名字为：<code>USERNAME</code>.github.io，如图：</p>
<p><img src="/img/github_create.png" alt="github_create"></p>
<p>仓库创建好之后，可以查看；如上图 <code>Your repositories</code> 对应的列表中点击 <em>rakkang.github.io</em> 可以打开仓库主页。要上传项目到仓库，还要在 Github 的 <code>Settings</code> 中添加自己的 SSH Key。</p>
<p><img src="/img/github_sshkey.png" alt="github_sshkey"></p>
<p>Github 仓库建好，设置项配置好之后，打开终端，进入博客目录：</p>
<figure class="highlight shell"><pre><div class="line">$ <span class="built_in">cd</span> ~/MyBlog</div></pre></figure>

<p>生成博客的静态网页，并部署到 Github:</p>
<figure class="highlight"><pre><div class="line">$ hexo generate <span class="comment">// 生成静态网页</span></div></pre></figure>

<p>在部署之前，还要配置下 Hexo 的服务器地址，打开 <code>~/MyBlog/_config.yml</code> 在文件的最后面，找到并编辑以下的内容：</p>
<figure class="highlight"><pre><div class="line"><span class="preprocessor"># Deployment</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="title">deploy</span>:</div><div class="line">  <span class="typedef"><span class="keyword">type</span>: github    <span class="comment">------&gt; 直接填写 github</span></span></div><div class="line">  repository: https://github.com/rakkang/rakkang.github.io.git   <span class="comment">-----&gt; Github 的仓库地址</span></div><div class="line">  brach: master</div></pre></figure>

<p>保存，在终端运行以下部署命令：</p>
<figure class="highlight"><pre><div class="line"><span class="variable">$ </span>hexo deploy</div></pre></figure>

<blockquote>
<p>Hexo 提供了简化的命令：</p>
</blockquote>
<figure class="highlight shell"><pre><div class="line">hexo g = hexo generate  <span class="comment">// 生成</span></div><div class="line">hexo d = hexo deploy    <span class="comment">// 部署</span></div><div class="line">hexo s = hexo <span class="keyword">server</span>    <span class="comment">// 运行服务器</span></div></pre></figure>

<p>首次运行部署命令可能会报以下的错误：</p>
<figure class="highlight"><pre><div class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/kang/temp/.deploy/.git/</div><div class="line"></div><div class="line">*** Please tell <span class="keyword">me</span> who you are.</div><div class="line"></div><div class="line">Run</div><div class="line"></div><div class="line">  git config --<span class="keyword">global</span> user.email <span class="string">"you@example.com"</span></div><div class="line">  git config --<span class="keyword">global</span> user.name <span class="string">"Your Name"</span></div><div class="line"></div><div class="line"><span class="keyword">to</span> <span class="keyword">set</span> your account<span class="comment">'s default identity.</span></div><div class="line">Omit --<span class="keyword">global</span> <span class="keyword">to</span> <span class="keyword">set</span> the identity only <span class="keyword">in</span> this repository.</div><div class="line"></div><div class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">auto</span>-detect email address (got <span class="comment">'kang@ruikye.(none)')</span></div></pre></figure>

<p>这是因为没配置 Git 的提交用户信息，可以通过下面的命令配置：</p>
<figure class="highlight"><pre><div class="line">$ git config user<span class="class">.email</span> <span class="attr_selector">[你的邮箱]</span></div><div class="line">$ git config user<span class="class">.name</span> <span class="attr_selector">[提交用户名]</span> <span class="comment">// 名字可以随便写</span></div></pre></figure>

]]></content>
    
    
      <category term="Hexo" scheme="http://www.ruikye.com/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://www.ruikye.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 单例模式]]></title>
    <link href="http://www.ruikye.com/2014/08/28/Java-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.ruikye.com/2014/08/28/Java-单例模式/</id>
    <published>2014-08-28T14:55:07.000Z</published>
    <updated>2014-08-29T09:16:55.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>私有化构造函数（饿汉模式）：    </li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>{</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 sIntance = <span class="keyword">new</span> Singleton1();</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="title">Singleton1</span>(){</div><div class="line">   }</div><div class="line"> </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span>(){</div><div class="line">      <span class="keyword">return</span> sIntance;</div><div class="line">   }</div><div class="line">}</div></pre></figure>

<ol>
<li>私有化构造函数，并提供静态获获取实例方法（懒汉模式）：</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton sInstance;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="title">Singleton</span>() {</div><div class="line">     }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(){</div><div class="line">        <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>){</div><div class="line">             sInstance = <span class="keyword">new</span> Singleton();</div><div class="line">         }</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">     }</div><div class="line">}</div></pre></figure>

<ol>
<li><p>单元素 Enum 类型实现单列（强烈推荐）：</p>
<p>参考：《Effective Java》, 推荐使用该方法，理由如下：</p>
<ul>
<li>绝对的局唯一，可以序列化</li>
<li>绝对的预防反射攻击</li>
<li>绝对的简洁</li>
</ul>
</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton {</div><div class="line">    INSTANCE;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomthing</span>(){</div><div class="line">        Log.d(<span class="string">"Sigleton"</span> , <span class="string">"This is a single instace!"</span> );</div><div class="line">     }</div><div class="line">}</div></pre></figure>

<ol>
<li><p>利用 JVM 类加载机制（多线程）：  </p>
<p>我们知道 JVM 加载类时只会加载一次，可以利用此特性实现单例。优点：</p>
<ul>
<li>可以多线程使用</li>
<li>绝对唯一</li>
<li>不调用 getInstance 不会实例化</li>
</ul>
</li>
</ol>
<figure class="highlight java"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</div><div class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>{</div><div class="line">         <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">     }</div><div class="line"> </div><div class="line">     <span class="keyword">private</span> <span class="title">Singleton</span>(){</div><div class="line">     }</div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>() {</div><div class="line">         <span class="keyword">return</span> Holder. instance;</div><div class="line">     }</div><div class="line">}</div></pre></figure>

]]></content>
    
    
      <category term="Java" scheme="http://www.ruikye.com/tags/Java/"/>
    
      <category term="Java" scheme="http://www.ruikye.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask 的使用]]></title>
    <link href="http://www.ruikye.com/2014/08/28/AsyncTask-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.ruikye.com/2014/08/28/AsyncTask-的使用/</id>
    <published>2014-08-28T11:50:20.000Z</published>
    <updated>2014-08-29T09:16:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>AsyncTask是 Android 提供的在 UI 线程处理耗时操作的类，内部的实现原理是 Thread + Handle 的方式。AsyncTask 是用于处理耗时不是很长的异步操作（一般秒级的操作比较合适）；如果要执行时间很长的或者循环的异步任务，推荐使用其他的多线程 API, 比如：Thread, FetureTask, ThreadPoolExecutor。</p>
</blockquote>
<p>AsyncTask 是 Android 很重要的工具类，历史版本修改次数比较多，不同版本之间的区别也比较大：</p>
<blockquote>
<p><strong><em>Android 1.5:</em></strong><br>AsyncTask 底层是使用唯一的线程来执行任务的，任务按顺序执行，一个执行完再执行下一个</p>
<p><strong><em>Android 1.6:</em></strong><br>AsyncTask 使用线程池并行执行任务，执行顺序无法保证</p>
<p><strong><em>Android 3.0:</em></strong><br>从 Android 3.0 开始，又改为默认按顺序执行，一个接着一个执行。但是增加了一个函数来支持多线程并发执行：AsyncTask#executeOnExecutor (Executor, Params)</p>
</blockquote>
<p>下面来介绍最近的版本，Android 4.2 SDK中的：</p>
<blockquote>
<p>4.2 默认是按顺序执行的，同时支持多线程并发执行</p>
</blockquote>
<figure class="highlight java"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">5</span>; <span class="comment">//5个核心线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">128</span>; <span class="comment">//最多分配128个线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>; <span class="comment">//非核心线程空闲超时1s,自动销毁</span></div><div class="line"><span class="comment">//当无空闲核心线程时，新任务添加到消息队列；消息队列填满时，再启动新的线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = </div><div class="line">truetruetruetruetruetruenew LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">10</span>);<span class="comment">//等待消息队列</span></div><div class="line"><span class="comment">// 并行任务执行器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">           = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, </div><div class="line">           		KEEP_ALIVE, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div><div class="line"><span class="comment">// 顺序任务执行器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"><span class="comment">// 默认使用顺序任务执行器</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div></pre></figure>

<h4 id="新添加_AsyncTask_任务时，可能出现的_4_中情况：">新添加 AsyncTask 任务时，可能出现的 4 中情况：</h4>
<ol>
<li><p><strong>有空闲的核心线程时：</strong>直接使用空闲的核心线程执行异步任务  </p>
</li>
<li><p><strong>没有空闲的核心线程，但缓存队列未满时：</strong>新任务被添加到缓冲队列</p>
</li>
<li><p><strong>没有空闲的核心线程，缓冲队列已满，但线程数没到上线时：</strong>创建新的线程执行异步任务</p>
</li>
<li><p><strong>线程池中已满128个线程时：</strong>抛出 <em>RejectedExecutionException</em></p>
</li>
</ol>
<h4 id="其他注意点：">其他注意点：</h4>
<ol>
<li><p>由于 AsyncTask 内部的线程池是 <em>static</em> 类型，整个进程共用一个线程池；如果使用不当，会产生阻塞问题，尤其是单任务顺序执行的情况下，一个任务执行时间过长会阻塞其他任务的执行</p>
</li>
<li><p><em>static</em> 线程另外一个问题是，如果第一次调用 AsyncTask 在非 UI 线程中，那么以后使用 AsyncTask时，onPosExecute 也会在非 UI 线程中，此时如果执行 UI 操作会 Crash，所以第一次使用 AsyncTask 一定要在 UI 线程中使用，尤其是使用第三方 SDK 时要注意这点 </p>
</li>
<li><p>通常使用 AsyncTask 是在 Activity 中使用匿名的内部类来使用，内部类的一个问题是会保持外部类的实例，如果 AsyncTask 中的异步任务在 Activity 退出时还没执行完或者阻塞了，那么这个保持的外部的 Activity 实例得不到释放，会引起 OOM 问，解决办法是：在 AsyncTask 使用弱引用外部实例，或者保证在 Activity 退出时，所有的 AsyncTask 已执行完成或被取消 </p>
</li>
</ol>
]]></content>
    
    
      <category term="Android" scheme="http://www.ruikye.com/tags/Android/"/>
    
      <category term="Android" scheme="http://www.ruikye.com/categories/Android/"/>
    
  </entry>
  
</feed>
